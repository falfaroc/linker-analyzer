#!/usr/bin/env python3

import sys
import argparse

flash_addr_begin = 0x8000000
flash_length = 0xF0000
flash_addr_end = flash_addr_begin + flash_length

ram_addr_begin = 0x20000000
ram_length = 0x20000
ram_addr_end = ram_addr_begin + ram_length


def parse_lines(lines):
    flash_total = 0
    ram_total = 0

    for line in lines:
        if "addr" in line:
            break

    for line in lines:
        line = line.split()

        if len(line) != 3:
            continue

        if ".data" in line[0]:
            flash_total += int(line[1], 16)
            ram_total += int(line[1], 16)
            continue

        if int(line[2], 16) > flash_addr_begin and int(line[2], 16) < flash_addr_end:
            flash_total += int(line[1], 16)
        elif int(line[2], 16) > ram_addr_begin and int(line[2], 16) < ram_addr_end:
            ram_total += int(line[1], 16)

    print("Flash Total:", flash_total)
    print("RAM Total:", ram_total)


def analyze(args):
    with open(args.map_file) as f:
        lines = iter(f)

        parse_lines(lines)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Summarises the size of each object file in an ld linker map.')
    parser.add_argument(
        'map_file', help="A map file generated by passing -M/--print-map to ld during linking.")
    args = parser.parse_args()

    analyze(args)
